datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Provider {
  GOOGLE
  YANDEX
}

enum Role {
  USER
  ADMIN
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum AccountTypeEnum {
  CASH // Наличные
  DEBIT_CARD // Дебетовая карта
  CREDIT_CARD // Кредитная карта
  VIRTUAL_ACCOUNT // Виртуальный счет
  INVESTMENT // Инвестиции
  RECEIVABLES // Дебиторская задолженность
  PAYABLES // Кредиторская задолженность
}

model User {
  id        String    @id @unique @default(uuid())
  email     String    @unique
  password  String?
  roles     Role[]
  provider  Provider?
  tokens    Token[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  transactions Transaction[]
  categories   Category[]
  accounts     Account[]
  budgets      Budget[]
  goals        Goal[]

  @@map("users")
}

model Token {
  token     String   @unique
  exp       DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  userAgent String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tokens")
}

model Transaction {
  id                      Int             @id @default(autoincrement())
  amount                  Float
  type                    TransactionType
  description             String
  balanceAfterTransaction Float
  createdAt               DateTime        @default(now())
  userId                  String
  user                    User            @relation(fields: [userId], references: [id])
  categoryId              Int
  category                Category        @relation(fields: [categoryId], references: [id])
  accountId               String
  account                 Account         @relation(fields: [accountId], references: [id])

  @@map("transactions")
}

model Category {
  id           Int           @id @default(autoincrement())
  name         String
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
  Budget       Budget[]

  @@map("categories")
}

// Account
model Account {
  id          String  @id @unique @default(uuid())
  name        String  @unique
  balance     Float
  description String
  isActive    Boolean
  currency    String

  accountTypeId String
  accountType   AccountType @relation(fields: [accountTypeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  transactions Transaction[]

  @@map("accounts")
}

model AccountType {
  id       String          @id @unique @default(uuid())
  name     AccountTypeEnum @unique
  accounts Account[]

  @@map("account_types")
}

model Budget {
  id         Int      @id @default(autoincrement())
  amount     Float
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("budgets")
}

model Goal {
  id            Int    @id @default(autoincrement())
  name          String
  targetAmount  Float
  currentAmount Float
  userId        String
  user          User   @relation(fields: [userId], references: [id])

  @@map("goals")
}
