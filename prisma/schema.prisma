datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Provider {
  GOOGLE
  YANDEX
}

enum Role {
  USER
  ADMIN
}

enum TransactionType {
  CREDIT // Расходы
  DEBIT // Поступления
  TRANSFER // Переводы между счетами
  ADJUSTMENT // Корректировки
}

enum AccountType {
  CASH // Наличные
  DEBIT_CARD // Дебетовая карта
  CREDIT_CARD // Кредитная карта
  VIRTUAL_ACCOUNT // Виртуальный счет
  INVESTMENT // Инвестиции
  RECEIVABLES // Дебиторская задолженность
  PAYABLES // Кредиторская задолженность
}

enum CategoryType {
  EXPENSE // Расход
  INCOME // Доход
}

enum AccountRole {
  OWNER
  MEMBER
}

model User {
  id        String    @id @unique @default(uuid())
  email     String    @unique
  password  String?
  roles     Role[]
  provider  Provider?
  tokens    Token[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  transactions    Transaction[]
  categories      Category[]
  accounts        Account[]
  budgets         Budget[]
  goals           Goal[]
  AccountMember   AccountMember[]
  AccountCategory AccountCategory[]

  @@map("users")
}

model Token {
  token     String   @unique
  exp       DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  userAgent String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tokens")
}

model Transaction {
  id          String          @id @unique @default(uuid())
  amount      Decimal
  type        TransactionType
  description String?
  date        DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id])

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  accountId String
  account   Account @relation(fields: [accountId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type])
  @@index([accountId])
  @@index([categoryId])
  @@map("transactions")
}

model Category {
  id           String            @id @unique @default(uuid())
  name         String
  type         CategoryType
  icon         String
  color        String? // например, персональные настройки цвета у категории
  userId       String
  user         User              @relation(fields: [userId], references: [id])
  transactions Transaction[]
  budgets      Budget[]
  accounts     AccountCategory[] // Связь через промежуточную таблицу

  @@unique([userId, name, type], name: "category_user_name_type")
  @@map("categories")
}

model AccountCategory {
  accountId String
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  addedById String
  addedBy   User   @relation(fields: [addedById], references: [id])

  addedAt DateTime @default(now())

  @@id([accountId, categoryId])
  @@map("account_categories")
}

// Account
model Account {
  id          String      @id @unique @default(uuid())
  name        String
  balance     Decimal
  description String
  isActive    Boolean
  currency    String
  type        AccountType @default(CASH)

  members      AccountMember[]
  transactions Transaction[]
  categories   AccountCategory[] // Связь через промежуточную таблицу

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?

  @@map("accounts")
}

model AccountMember {
  id        String      @id @unique @default(uuid())
  account   Account     @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  role      AccountRole // OWNER / MEMBER
  joinedAt  DateTime    @default(now())

  @@unique([accountId, userId], name: "account_user_unique")
  @@map("account_members")
}

model Budget {
  id         Int      @id @default(autoincrement())
  amount     Decimal
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("budgets")
}

model Goal {
  id            Int     @id @default(autoincrement())
  name          String
  targetAmount  Decimal
  currentAmount Decimal
  userId        String
  user          User    @relation(fields: [userId], references: [id])

  @@map("goals")
}
